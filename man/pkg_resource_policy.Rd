% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes_resources.R
\name{pkg_resource_policy}
\alias{pkg_resource_policy}
\title{Package Resource Policy Class}
\usage{
pkg_resource_policy(
  types = list(structure(function (path = NA_character_) 
 new_object(pkg_resource(),
    path = path), name = "pkg_source_resource", parent = structure(function () 
 {
    
    new_object(S7_object())
 }, name = "pkg_resource", parent = structure(function () 

    {
     .Call(S7_object_)
 }, name = "S7_object", properties = list(), abstract =
    FALSE, constructor = function () 
 {
     .Call(S7_object_)
 }, validator = function
    (self) 
 {
     if (!is_S7_type(self)) {
         "Underlying data is corrupt"
    
    }
 }, class = c("S7_class", "S7_object")), package = "val.meter", properties =
    list(), abstract = FALSE, constructor = function () 
 {
     new_object(S7_object())

    }, class = c("S7_class", "S7_object")), package = "val.meter", properties = list(path
    = structure(list(name = "path", class = structure(list(class = "character",
    constructor_name = "character", constructor = function (.data = character(0)) 

    .data, validator = function (object) 
 {
     if (base_class(object) != name) {
     
       sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
    
    }
 }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (path = NA_character_) 
 new_object(pkg_resource(),
    path = path), class = c("S7_class", "S7_object")), structure(function (path =
    NA_character_) 
 new_object(pkg_source_resource(path = path)), name =
    "pkg_archive_source_resource", parent = structure(function (path = NA_character_) 

    new_object(pkg_resource(), path = path), name = "pkg_source_resource", parent =
    structure(function () 
 {
     new_object(S7_object())
 }, name = "pkg_resource",
    parent = structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object",
    properties = list(), abstract = FALSE, constructor = function () 
 {
    
    .Call(S7_object_)
 }, validator = function (self) 
 {
     if (!is_S7_type(self)) {
 
           "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")),
    package = "val.meter", properties = list(), abstract = FALSE, constructor = function
    () 
 {
     new_object(S7_object())
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(path = structure(list(name = "path", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (path = NA_character_) 
 new_object(pkg_resource(),
    path = path), class = c("S7_class", "S7_object")), package = "val.meter", properties
    = list(path = structure(list(name = "path", class = structure(list(class =
    "character", constructor_name = "character", constructor = function (.data =
    character(0)) 
 .data, validator = function (object) 
 {
     if (base_class(object)
    != name) {
         sprintf("Underlying data must be <\%s> not <\%s>", name,
    base_class(object))
     }
 }), class = "S7_base_class"), getter = NULL, setter =
    NULL, validator = function (value) 
 {
     if (length(value) != 1L || is.na(value)
    || !file.exists(value)) 
         "invalid path"
 }, default = NA_character_), class
    = "S7_property")), abstract = FALSE, constructor = function (path = NA_character_) 

    new_object(pkg_source_resource(path = path)), class = c("S7_class", "S7_object")),
    structure(function (path = NA_character_) 
 new_object(pkg_source_resource(path =
    path)), name = "pkg_install_resource", parent = structure(function (path =
    NA_character_) 
 new_object(pkg_resource(), path = path), name =
    "pkg_source_resource", parent = structure(function () 
 {
    
    new_object(S7_object())
 }, name = "pkg_resource", parent = structure(function () 

    {
     .Call(S7_object_)
 }, name = "S7_object", properties = list(), abstract =
    FALSE, constructor = function () 
 {
     .Call(S7_object_)
 }, validator = function
    (self) 
 {
     if (!is_S7_type(self)) {
         "Underlying data is corrupt"
    
    }
 }, class = c("S7_class", "S7_object")), package = "val.meter", properties =
    list(), abstract = FALSE, constructor = function () 
 {
     new_object(S7_object())

    }, class = c("S7_class", "S7_object")), package = "val.meter", properties = list(path
    = structure(list(name = "path", class = structure(list(class = "character",
    constructor_name = "character", constructor = function (.data = character(0)) 

    .data, validator = function (object) 
 {
     if (base_class(object) != name) {
     
       sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
    
    }
 }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = function
    (value) 
 {
     if (length(value) != 1L || is.na(value) || !file.exists(value)) 
   
         "invalid path"
 }, default = NA_character_), class = "S7_property")), abstract =
    FALSE, constructor = function (path = NA_character_) 
 new_object(pkg_resource(),
    path = path), class = c("S7_class", "S7_object")), package = "val.meter", properties
    = list(path = structure(list(name = "path", class = structure(list(class =
    "character", constructor_name = "character", constructor = function (.data =
    character(0)) 
 .data, validator = function (object) 
 {
     if (base_class(object)
    != name) {
         sprintf("Underlying data must be <\%s> not <\%s>", name,
    base_class(object))
     }
 }), class = "S7_base_class"), getter = NULL, setter =
    NULL, validator = function (value) 
 {
     if (length(value) != 1L || is.na(value)
    || !file.exists(value)) 
         "invalid path"
 }, default = NA_character_), class
    = "S7_property")), abstract = FALSE, constructor = function (path = NA_character_) 

    new_object(pkg_source_resource(path = path)), class = c("S7_class", "S7_object"))),
  accepted_source_types = list(structure(function (package = character(0), version =
    character(0), repo = character(0)) 
 new_object(pkg_resource(), package = package,
    version = version, repo = repo), name = "pkg_repo_resource", parent =
    structure(function () 
 {
     new_object(S7_object())
 }, name = "pkg_resource",
    parent = structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object",
    properties = list(), abstract = FALSE, constructor = function () 
 {
    
    .Call(S7_object_)
 }, validator = function (self) 
 {
     if (!is_S7_type(self)) {
 
           "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")),
    package = "val.meter", properties = list(), abstract = FALSE, constructor = function
    () 
 {
     new_object(S7_object())
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(package = structure(list(name = "package", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NULL), class = "S7_property"), version = structure(list(name = "version", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NULL), class = "S7_property"), repo = structure(list(name = "repo", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NULL), class = "S7_property")), abstract = FALSE, constructor = function (package =
    character(0), version = character(0), repo = character(0)) 

    new_object(pkg_resource(), package = package, version = version, repo = repo), class
    = c("S7_class", "S7_object")), structure(function (http_url = character(0)) 

    new_object(pkg_resource(), http_url = http_url), name = "pkg_git_resource", parent =
    structure(function () 
 {
     new_object(S7_object())
 }, name = "pkg_resource",
    parent = structure(function () 
 {
     .Call(S7_object_)
 }, name = "S7_object",
    properties = list(), abstract = FALSE, constructor = function () 
 {
    
    .Call(S7_object_)
 }, validator = function (self) 
 {
     if (!is_S7_type(self)) {
 
           "Underlying data is corrupt"
     }
 }, class = c("S7_class", "S7_object")),
    package = "val.meter", properties = list(), abstract = FALSE, constructor = function
    () 
 {
     new_object(S7_object())
 }, class = c("S7_class", "S7_object")), package
    = "val.meter", properties = list(http_url = structure(list(name = "http_url", class =
    structure(list(class = "character", constructor_name = "character", constructor =
    function (.data = character(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), getter = NULL, setter = NULL, validator = NULL, default
    = NULL), class = "S7_property")), abstract = FALSE, constructor = function (http_url
    = character(0)) 
 new_object(pkg_resource(), http_url = http_url), class =
    c("S7_class", "S7_object"))),
  permit_download = TRUE
)
}
\description{
A descriptor of how package resources should be discovered, indicating
which types of package resources should be considered and how they must be
used to produce consistently sourced information.
}
\section{Fields}{

\describe{
\item{\code{types}}{A list of resources types to permit. Ordered by priority,
highest to lowest.}

\item{\code{accepted_source_types}}{A list of additional resources types to
use, ordered by priority, highest to lowest. These types must be able
to be \code{\link[S7:convert]{S7::convert()}}ed into one of \verb{@types} to be used as a resource.}

\item{\code{permit_download}}{When \code{TRUE}, permits downloading of additional
files. Most commonly, this means downloading the package archive from
a provided repository.}
}}

